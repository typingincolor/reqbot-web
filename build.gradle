buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

configurations {
    all*.exclude group: 'logback'
    all*.exclude group: 'log4j'
    compile.exclude module: "sping-boot-starter-tomcat"
}

findbugs {
    ignoreFailures true
    effort = "max"
    reportLevel = "medium"
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.google.guava:guava:18.0'
    compile 'org.javassist:javassist:3.19.0-GA'
    compile 'com.mashape.unirest:unirest-java:1.4.5'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'uk.co.modular-it:hamcrest-date:0.9.5'
    testCompile 'commons-lang:commons-lang:2.6'
    testCompile 'org.cthul:cthul-matchers:1.1.0'
    testCompile 'com.github.tomakehurst:wiremock:1.55'
    testCompile 'com.google.code.findbugs:findbugs:3.0.1'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

test {
    jacoco {
        append false
    }
    useJUnit {
        excludeCategories 'com.losd.reqbotweb.test.IntegrationTest'
    }
}

task integrationTest(type: Test) {

}

integrationTest {
    useJUnit {
        includeCategories 'com.losd.reqbotweb.test.IntegrationTest'
    }
}

task stage(type: Copy, dependsOn: [clean, bootRepackage, installDist]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'reqbot-web.jar'
    }
}
stage.mustRunAfter(clean)
uploadArchives.dependsOn bootRepackage

clean << {
    project.file('reqbot-web.jar').delete()
}

task generateGitProperties {
    doLast {
        try {
            def shortRevision = 'git rev-parse --short HEAD'.execute().text.trim()
            def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
            def timestamp = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd'T'HH:mm:ssZ") : null

            File resourcesDir = new File(project.getBuildDir(), 'resources/main')
            File propertiesFile = new File(resourcesDir, 'git.properties')

            if(timestamp) {
                // The project may not have any resources, so create the directories and file
                if(!propertiesFile.exists()) {
                    resourcesDir.mkdirs()
                    propertiesFile.createNewFile()
                }
            } else {
                project.logger.info('Unable to generate Git properties file:  will try SOURCE_VERSION environment variable')
                def env = System.getenv()
                shortRevision = env['SOURCE_VERSION'].substring(0, 7);
            }
            propertiesFile.text = """git.short.commit.id=${shortRevision}"""
        } catch (e) {
            project.logger.error('Unable to generate Git properties file.', e)
        }
    }
}

project.tasks.jar.dependsOn('generateGitProperties')
